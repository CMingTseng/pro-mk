/* Copyright Statement:
 *
 * This software/firmware and related documentation ("MediaTek Software") are
 * protected under relevant copyright laws. The information contained herein
 * is confidential and proprietary to MediaTek Inc. and/or its licensors.
 * Without the prior written permission of MediaTek inc. and/or its licensors,
 * any reproduction, modification, use or disclosure of MediaTek Software,
 * and information contained herein, in whole or in part, shall be strictly prohibited.
 */
/* MediaTek Inc. (C) 2010. All rights reserved.
 *
 * BY OPENING THIS FILE, RECEIVER HEREBY UNEQUIVOCALLY ACKNOWLEDGES AND AGREES
 * THAT THE SOFTWARE/FIRMWARE AND ITS DOCUMENTATIONS ("MEDIATEK SOFTWARE")
 * RECEIVED FROM MEDIATEK AND/OR ITS REPRESENTATIVES ARE PROVIDED TO RECEIVER ON
 * AN "AS-IS" BASIS ONLY. MEDIATEK EXPRESSLY DISCLAIMS ANY AND ALL WARRANTIES,
 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE IMPLIED WARRANTIES OF
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE OR NONINFRINGEMENT.
 * NEITHER DOES MEDIATEK PROVIDE ANY WARRANTY WHATSOEVER WITH RESPECT TO THE
 * SOFTWARE OF ANY THIRD PARTY WHICH MAY BE USED BY, INCORPORATED IN, OR
 * SUPPLIED WITH THE MEDIATEK SOFTWARE, AND RECEIVER AGREES TO LOOK ONLY TO SUCH
 * THIRD PARTY FOR ANY WARRANTY CLAIM RELATING THERETO. RECEIVER EXPRESSLY ACKNOWLEDGES
 * THAT IT IS RECEIVER'S SOLE RESPONSIBILITY TO OBTAIN FROM ANY THIRD PARTY ALL PROPER LICENSES
 * CONTAINED IN MEDIATEK SOFTWARE. MEDIATEK SHALL ALSO NOT BE RESPONSIBLE FOR ANY MEDIATEK
 * SOFTWARE RELEASES MADE TO RECEIVER'S SPECIFICATION OR TO CONFORM TO A PARTICULAR
 * STANDARD OR OPEN FORUM. RECEIVER'S SOLE AND EXCLUSIVE REMEDY AND MEDIATEK'S ENTIRE AND
 * CUMULATIVE LIABILITY WITH RESPECT TO THE MEDIATEK SOFTWARE RELEASED HEREUNDER WILL BE,
 * AT MEDIATEK'S OPTION, TO REVISE OR REPLACE THE MEDIATEK SOFTWARE AT ISSUE,
 * OR REFUND ANY SOFTWARE LICENSE FEES OR SERVICE CHARGE PAID BY RECEIVER TO
 * MEDIATEK FOR SUCH MEDIATEK SOFTWARE AT ISSUE.
 *
 * The following software/firmware and/or related documentation ("MediaTek Software")
 * have been modified by MediaTek Inc. All revisions are subject to any receiver's
 * applicable license agreements with MediaTek Inc.
 */

/*****************************************************************************
*  Copyright Statement:
*  --------------------
*  This software is protected by Copyright and the information contained
*  herein is confidential. The software may not be copied and the information
*  contained herein may not be used or disclosed except with the written
*  permission of MediaTek Inc. (C) 2008
*
*  BY OPENING THIS FILE, BUYER HEREBY UNEQUIVOCALLY ACKNOWLEDGES AND AGREES
*  THAT THE SOFTWARE/FIRMWARE AND ITS DOCUMENTATIONS ("MEDIATEK SOFTWARE")
*  RECEIVED FROM MEDIATEK AND/OR ITS REPRESENTATIVES ARE PROVIDED TO BUYER ON
*  AN "AS-IS" BASIS ONLY. MEDIATEK EXPRESSLY DISCLAIMS ANY AND ALL WARRANTIES,
*  EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE IMPLIED WARRANTIES OF
*  MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE OR NONINFRINGEMENT.
*  NEITHER DOES MEDIATEK PROVIDE ANY WARRANTY WHATSOEVER WITH RESPECT TO THE
*  SOFTWARE OF ANY THIRD PARTY WHICH MAY BE USED BY, INCORPORATED IN, OR
*  SUPPLIED WITH THE MEDIATEK SOFTWARE, AND BUYER AGREES TO LOOK ONLY TO SUCH
*  THIRD PARTY FOR ANY WARRANTY CLAIM RELATING THERETO. MEDIATEK SHALL ALSO
*  NOT BE RESPONSIBLE FOR ANY MEDIATEK SOFTWARE RELEASES MADE TO BUYER'S
*  SPECIFICATION OR TO CONFORM TO A PARTICULAR STANDARD OR OPEN FORUM.
*
*  BUYER'S SOLE AND EXCLUSIVE REMEDY AND MEDIATEK'S ENTIRE AND CUMULATIVE
*  LIABILITY WITH RESPECT TO THE MEDIATEK SOFTWARE RELEASED HEREUNDER WILL BE,
*  AT MEDIATEK'S OPTION, TO REVISE OR REPLACE THE MEDIATEK SOFTWARE AT ISSUE,
*  OR REFUND ANY SOFTWARE LICENSE FEES OR SERVICE CHARGE PAID BY BUYER TO
*  MEDIATEK FOR SUCH MEDIATEK SOFTWARE AT ISSUE.
*
*  THE TRANSACTION CONTEMPLATED HEREUNDER SHALL BE CONSTRUED IN ACCORDANCE
*  WITH THE LAWS OF THE STATE OF CALIFORNIA, USA, EXCLUDING ITS CONFLICT OF
*  LAWS PRINCIPLES.  ANY DISPUTES, CONTROVERSIES OR CLAIMS ARISING THEREOF AND
*  RELATED THERETO SHALL BE SETTLED BY ARBITRATION IN SAN FRANCISCO, CA, UNDER
*  THE RULES OF THE INTERNATIONAL CHAMBER OF COMMERCE (ICC).
*
*****************************************************************************/

#ifndef BUILD_LK
#include <linux/string.h>
#endif
#include "lcm_drv.h"
#include <cust_gpio_usage.h>
#ifdef BUILD_LK
	#include <platform/mt_gpio.h>
	#include <string.h>
#elif defined(BUILD_UBOOT)
	#include <asm/arch/mt_gpio.h>
#else
	#include <mach/mt_gpio.h>
#endif
// ---------------------------------------------------------------------------
//  Local Constants
// ---------------------------------------------------------------------------

#define FRAME_WIDTH  (720)
#define FRAME_HEIGHT (1280)
#define LCM_ID       (0x94)
static unsigned int lcm_compare_id(void);
#ifndef TRUE
    #define TRUE 1
#endif

#ifndef FALSE
    #define FALSE 0
#endif

#ifndef BUILD_LK
static unsigned int lcm_esd_test = FALSE;      ///only for ESD test
#endif
// ---------------------------------------------------------------------------
//  Local Variables
// ---------------------------------------------------------------------------

static LCM_UTIL_FUNCS lcm_util;

#define SET_RESET_PIN(v)    (lcm_util.set_reset_pin((v)))

#define UDELAY(n) (lcm_util.udelay(n))
#define MDELAY(n) (lcm_util.mdelay(n))


// ---------------------------------------------------------------------------
//  Local Functions
// ---------------------------------------------------------------------------
#define dsi_set_cmdq_V3(para_tbl,size,force_update)        lcm_util.dsi_set_cmdq_V3(para_tbl,size,force_update)
#define dsi_set_cmdq_V2(cmd, count, ppara, force_update)	        lcm_util.dsi_set_cmdq_V2(cmd, count, ppara, force_update)
#define dsi_set_cmdq(pdata, queue_size, force_update)		lcm_util.dsi_set_cmdq(pdata, queue_size, force_update)
#define wrtie_cmd(cmd)										lcm_util.dsi_write_cmd(cmd)
#define write_regs(addr, pdata, byte_nums)					lcm_util.dsi_write_regs(addr, pdata, byte_nums)
#define read_reg(cmd)											lcm_util.dsi_dcs_read_lcm_reg(cmd)
#define read_reg_v2(cmd, buffer, buffer_size)   				lcm_util.dsi_dcs_read_lcm_reg_v2(cmd, buffer, buffer_size)

#define   LCM_DSI_CMD_MODE							0

#define REGFLAG_DELAY             							0XFE
#define REGFLAG_END_OF_TABLE      							0xFF   // END OF REGISTERS MARKER



static LCM_setting_table_V3 lcm_initialization_setting[] = { 
#if 1 
        {0x39,0xB9,3,{0xFF,0x83,0x94}},//SET PASSWORD 
        {0x39, 0xBA,  2 ,{0x73,0x83}},//SET MIPI 4 LANE 

        {0x39, 0xB0,  2 ,{0x00,0x00,0x7d,0x0c}},


        {0x39, 0xB1, 15, {0x6C, 0x15, 0x15, 0x24, 0x04, 0x11, 
                           0xF1, 0x80, 0xE4,  0x97,  0x23, 0x80, 0xC0, 0xD2, 0x58}},//SET POWER 

       {0x39, 0xB2,  11 ,{0x00, 0x64, 0x10, 0x07, 0x22, 0x1C, 0x08, 0x08, 0x1C, 0x4D, 0x00}},
//SET DISPLAY RELATED REGISTER 

        {0x39, 0xB4, 12, {0x00, 0xFF, 0x03, 0x5A, 0x03, 0x5A, 0x03, 0x5A, 0x01, 0x6A, 0x30, 0x6A}},
	
{0x15, 0xBC, 1, {0x07}},

{0x39, 0xBF, 3, {0x41, 0x0E, 0x01}},

{0x39, 0xD3, 30, {0x00, 0x06, 0x00, 0x40, 0x07, 0x08, 0x00, 
                        0x32, 0x10, 0x07, 0x00, 0x07, 0x54, 0x15, 
                        0x0F, 0x05, 0x04, 0x02, 0x12, 0x10, 0x05,
                        0x07, 0x33, 0x33, 0x0B, 0x0B, 0x37, 0x10, 0x07, 0x07}},

{0x39, 0xD5, 44, {0x04, 0x05, 0x06, 0x07, 0x00, 0x01, 0x02, 0x03, 0x20,
                      0x21, 0x22, 0x23, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 
                      0x18, 0x18, 0x19, 0x19, 0x18, 0x18, 0x18, 0x18, 0x1B, 
                      0x1B, 0x1A, 0x1A, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18,
                      0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18}},


{0x39, 0xD6, 44, {0x03, 0x02, 0x01, 0x00, 0x07, 0x06, 0x05, 0x04, 0x23,
                        0x22, 0x21, 0x20, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 
                        0x58, 0x58, 0x18, 0x18, 0x19, 0x19, 0x18, 0x18, 0x1B, 
                        0x1B, 0x1A, 0x1A, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18,
                        0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18}},

{0x15, 0xCC, 1, {0x01}},

{0x39, 0xB6, 2, {0x4C, 0x4C}},


{0x39, 0xE0, 42, {0x00, 0x10, 0x16, 0x2D, 0x33, 0x3F, 0x23, 0x3E,
                        0x07, 0x0B, 0x0D, 0x17, 0x0E, 0x12, 0x14, 0x12,
                        0x13, 0x06, 0x11, 0x13, 0x18, 0x00, 0x0F, 0x16, 
                        0x2E, 0x33, 0x3F, 0x23, 0x3D, 0x07, 0x0B, 0x0D,
                        0x18, 0x0F, 0x12, 0x14, 0x12, 0x14, 0x07, 0x11, 0x12, 0x17}},

{0x39, 0xC0, 2, {0x30, 0x14}},


{0x39, 0xC7, 4, {0x00, 0xC0, 0x40, 0xC0}},

{0x15, 0xDF, 1, {0x8E}},


{0x15, 0xD2, 1, {0x66}},
	
{0x05, 0x11,0,{}},//
{REGFLAG_ESCAPE_ID,REGFLAG_DELAY_MS_V3,150,{}},

{0x05, 0x29,0,{}},//
{REGFLAG_ESCAPE_ID,REGFLAG_DELAY_MS_V3,20,{}},	  

 

#endif 
}; 
// ---------------------------------------------------------------------------
//  LCM Driver Implementations
// ---------------------------------------------------------------------------

static void lcm_set_util_funcs(const LCM_UTIL_FUNCS *util)
{
    memcpy(&lcm_util, util, sizeof(LCM_UTIL_FUNCS));
}


static void lcm_get_params(LCM_PARAMS *params)
{
		memset(params, 0, sizeof(LCM_PARAMS));
	
		params->type   = LCM_TYPE_DSI;

		params->width  = FRAME_WIDTH;
		params->height = FRAME_HEIGHT;

        #if (LCM_DSI_CMD_MODE)
		params->dsi.mode   = CMD_MODE;
        #else
		params->dsi.mode   = SYNC_PULSE_VDO_MODE; //BURST_VDO_MODE; //SYNC_PULSE_VDO_MODE;//BURST_VDO_MODE; 
        #endif
	
		// DSI
		/* Command mode setting */
		//1 Three lane or Four lane
		params->dsi.LANE_NUM				= LCM_FOUR_LANE;
		//The following defined the fomat for data coming from LCD engine.
		params->dsi.data_format.format      = LCM_DSI_FORMAT_RGB888;

		// Video mode setting		
		params->dsi.PS=LCM_PACKED_PS_24BIT_RGB888;

        params->dsi.vertical_sync_active                                = 0x02;// 3    2 
        params->dsi.vertical_backporch                                        = 0x0a;// 20   1 
        params->dsi.vertical_frontporch                                        = 0x06; // 1  12 
        params->dsi.vertical_active_line                                = FRAME_HEIGHT; 

        params->dsi.horizontal_sync_active                                = 0x37;// 50  2 
        params->dsi.horizontal_backporch                                = 0x37; 
        params->dsi.horizontal_frontporch                                = 0x56; 
        params->dsi.horizontal_active_pixel                                = FRAME_WIDTH; 

	    //params->dsi.LPX=8; 

		// Bit rate calculation
	//	params->dsi.PLL_CLOCK = 240;
		//1 Every lane speed
		
		params->dsi.pll_div1=0;		// div1=0,1,2,3;div1_real=1,2,4,4 ----0: 546Mbps  1:273Mbps
		params->dsi.pll_div2=0;		// div2=0,1,2,3;div1_real=1,2,4,4	
		params->dsi.fbk_div =9;    // fref=26MHz, fvco=fref*(fbk_div+1)*2/(div1_real*div2_real)	
		

}

static void lcm_init(void)
{
		SET_RESET_PIN(1);	
		MDELAY(5); // 1ms
		SET_RESET_PIN(0);
		MDELAY(10); 
		SET_RESET_PIN(1);
		MDELAY(120); 
		dsi_set_cmdq_V3(lcm_initialization_setting,sizeof(lcm_initialization_setting)/sizeof(lcm_initialization_setting[0]),1);
}



static void lcm_suspend(void)
{
	unsigned int data_array[16];

//	data_array[0]=0x00280500; // Display Off
//	dsi_set_cmdq(data_array, 1, 1);
	
//	data_array[0] = 0x00100500; // Sleep In
//	dsi_set_cmdq(data_array, 1, 1);
//	MDELAY(200);  

	
	SET_RESET_PIN(1);	
	MDELAY(5); // 1ms
	
	SET_RESET_PIN(0);
	MDELAY(10); // 1ms
	
	SET_RESET_PIN(1);
	MDELAY(200);     
	//lcm_util.set_gpio_out(GPIO_LCD_ENN, GPIO_OUT_ZERO);
	//lcm_util.set_gpio_out(GPIO_LCD_ENP, GPIO_OUT_ZERO); 

}


static void lcm_resume(void)
{
	////int mn_id;
	
	//lcm_util.set_gpio_out(GPIO_LCD_ENN, GPIO_OUT_ONE);
	//lcm_util.set_gpio_out(GPIO_LCD_ENP, GPIO_OUT_ONE);
	lcm_init();
	///mn_id = lcm_compare_id();
    #ifdef BUILD_LK
	  printf("[LK]---cmd---hx8394a_hd_dsi_vdo_truly----%s------\n",__func__);
    #else
	  printk("[KERNEL]---cmd---hx8394a_hd_dsi_vdo_truly----%s------\n",__func__);
    #endif	
}
         
#if (LCM_DSI_CMD_MODE)
static void lcm_update(unsigned int x, unsigned int y,
                       unsigned int width, unsigned int height)
{
	unsigned int x0 = x;
	unsigned int y0 = y;
	unsigned int x1 = x0 + width - 1;
	unsigned int y1 = y0 + height - 1;

	unsigned char x0_MSB = ((x0>>8)&0xFF);
	unsigned char x0_LSB = (x0&0xFF);
	unsigned char x1_MSB = ((x1>>8)&0xFF);
	unsigned char x1_LSB = (x1&0xFF);
	unsigned char y0_MSB = ((y0>>8)&0xFF);
	unsigned char y0_LSB = (y0&0xFF);
	unsigned char y1_MSB = ((y1>>8)&0xFF);
	unsigned char y1_LSB = (y1&0xFF);

	unsigned int data_array[16];

	data_array[0]= 0x00053902;
	data_array[1]= (x1_MSB<<24)|(x0_LSB<<16)|(x0_MSB<<8)|0x2a;
	data_array[2]= (x1_LSB);
	dsi_set_cmdq(data_array, 3, 1);
	
	data_array[0]= 0x00053902;
	data_array[1]= (y1_MSB<<24)|(y0_LSB<<16)|(y0_MSB<<8)|0x2b;
	data_array[2]= (y1_LSB);
	dsi_set_cmdq(data_array, 3, 1);

	data_array[0]= 0x002c3909;
	dsi_set_cmdq(data_array, 1, 0);

}
#endif

static unsigned int lcm_compare_id(void)
{

  	unsigned int ret = 0;
#if 0//mikezhu add
        unsigned int id = 0;
        unsigned char buffer[2];
        unsigned int array[16];
            SET_RESET_PIN(1);  //NOTE:should reset LCM firstly
            SET_RESET_PIN(0);
            MDELAY(1);
            SET_RESET_PIN(1);
            MDELAY(10);
    
    dsi_set_cmdq_V3(lcm_initialization_setting,sizeof(lcm_initialization_setting)/sizeof(lcm_initialization_setting[0]),1);
    
        array[0] = 0x00023700;// read id return two byte,version and id
        dsi_set_cmdq(array, 1, 1);
    //  id = read_reg(0xF4);
        read_reg_v2(0xF4, buffer, 2);
        id = buffer[0]; //we only need ID        
#ifdef BUILD_LK
	  printf("[LK]------lcm_compare_id----buffer[0]=%x,-buffer[1]=%x \n",buffer[0],buffer[1]);
#else
	  printk("[KERNEL]------lcm_compare_id----buffer[0]=%x,buffer[1]=%x,\n",buffer[0],buffer[1]);
#endif  
        return (LCM_ID == id)?1:0;

#endif

#if 0
return 1;

	ret = mt_get_gpio_in(GPIO92);
#if defined(BUILD_LK)
	printf("%s, [jx]hx8394a GPIO92 = %d \n", __func__, ret);
#endif	

	return (ret == 0)?1:0; 
#endif 

	ret = mt_get_gpio_in(GPIO17);
#if defined(BUILD_LK)	
	printf("%s, [jx]hx8394a GPIO92 = %d \n", __func__, ret);
#endif	      
	if(ret == 1)      	
	{      	    
		mt_set_gpio_out(GPIO126,1);      	
	}	
	else
	{	    
		mt_set_gpio_out(GPIO126,0);	 
	}	
	return (ret == 1)?1:0; 

}


static unsigned int lcm_esd_check(void)
{
  #ifndef BUILD_LK
	char  buffer[2];
	int   array[4];
	char  buffer_lcm[2];
	int   array_lcm[4];

	if(lcm_esd_test)
	{
		lcm_esd_test = FALSE;
		return TRUE;
	}

	///array[0] = 0x00023700;
	array[0] = 0x00013700;
	dsi_set_cmdq(array, 1, 1);
	read_reg_v2(0x09, buffer, 2);
       /// array[0] = 0x00013700;
        ////dsi_set_cmdq(array_lcm, 1, 1);
        read_reg_v2(0x0a, buffer_lcm, 1);///0x1c
 /*
#ifdef BUILD_LK
	  printf("[lk]------lcm_esd_check----buffer[0]=0x%x,-buffer[0]=0x%x,buffer[0]=0x%x ,buffer[0]=0x%x \n",buffer[0],buffer[1],buffer[2],buffer[3]);
#else
	  printk("[KERNEL]------lcm_esd_check----buffer[0]=0x%x,-buffer[1]=0x%x,buffer[2]=0x%x ,buffer[3]=0x%x \n",buffer[0],buffer[1],buffer[2],buffer[3]);	  
	  printk("[KERNEL]------lcm_esd_check----buffer_lcm[0]=0x%x,buffer_lcm[1]=0x%x \n",buffer_lcm[0],buffer_lcm[1]);
#endif  
*/
	if((buffer[0]==0x80)&&(buffer[1]==0x73)&&(buffer_lcm[0]==0x1c)/*&&(buffer[2]==0x3a)*/)
	{
		return FALSE;/////TRUE    for test //////FALSE;
	}
	else
	{	
        return TRUE ;
	}
	
/*
	read_reg_v2(0x36, buffer, 1);
	if(buffer[0]==0x90)
	{
		return FALSE;
	}
	else
	{			 
		return TRUE;
	}
	*/
#else
	return FALSE;
#endif

}

static unsigned int lcm_esd_recover(void)
{
	lcm_init();
///lcm_resume();
/////dsi_set_cmdq_V3(lcm_initialization_setting,sizeof(lcm_initialization_setting)/sizeof(lcm_initialization_setting[0]),1);
/*
#ifdef BUILD_LK
          printf("[LK]--hx8394a_hd720_dsi_vdo_yushun.c----lcm_esd_recover \n");
#else
          printk("[KERNEL]--hx8394a_hd720_dsi_vdo_yushun.c----lcm_esd_recover \n");
#endif  
*/
	return TRUE;
}



LCM_DRIVER hx8394_hd720_dsi_vdo_lcm_drv = 
{
    .name			= "hx8394_hd720_dsi_vdo",
	.set_util_funcs = lcm_set_util_funcs,
	.get_params     = lcm_get_params,
	.init           = lcm_init,
	.suspend        = lcm_suspend,
	.resume         = lcm_resume,
	.compare_id     = lcm_compare_id,
	.esd_check = lcm_esd_check,
	.esd_recover = lcm_esd_recover,
#if (LCM_DSI_CMD_MODE)
    .update         = lcm_update,
#endif
    };
